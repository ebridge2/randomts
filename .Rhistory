positiveDef <- function(nf) {
positive_def = rnorm(nf)
positive_def = positive_def %*% t(positive_def)
while (min(Re(eigen(positive_def)$values)) < 0) {
positive_def = positive_def + diag(nf)
}
return(positive_def)
}
model <- list()
model$mean <- rnorm(nf)
model$cov <- positiveDef(nf)
nf <- 10
model <- list()
model$mean <- rnorm(nf)
model$cov <- positiveDef(nf)\
model <- list()
model$mean <- rnorm(nf)
model$cov <- positiveDef(nf)\
model <- list()
model$mean <- rnorm(nf)
model$cov <- positiveDef(nf)
model$cov
model <- list()
model$mean <- rnorm(nf)
model$cov <- positiveDef(nf)
model
true_signal <- mvrnorm(n=nt, mu=model$mean, Sigma=model$cov)
require('MASS')
true_signal <- mvrnorm(n=nt, mu=model$mean, Sigma=model$cov)
nt <- 100
if (isTRUE(all.equal(options, 'gaussian'))) {
if (is.null(model)) {
model <- list()
model$mean <- rnorm(nf)
model$cov <- positiveDef(nf)
}
true_signal <- mvrnorm(n=nt, mu=model$mean, Sigma=model$cov)
true_signal
}
if (isTRUE(all.equal(options, 'gaussian'))) {
if (is.null(model)) {
model <- list()
model$mean <- rnorm(nf)
model$cov <- positiveDef(nf)
}
true_signal <- mvrnorm(n=nt, mu=model$mean, Sigma=model$cov)
}
}
if (isTRUE(all.equal(options, 'gaussian'))) {
if (is.null(model)) {
model <- list()
model$mean <- rnorm(nf)
model$cov <- positiveDef(nf)
}
true_signal <- mvrnorm(n=nt, mu=model$mean, Sigma=model$cov)
}
true_signal
true_signal
if (isTRUE(all.equal(options, 'gaussian'))) {
if (is.null(model)) {
model <- list()
model$mean <- rnorm(nf)
model$cov <- positiveDef(nf)
}
true_signal <- mvrnorm(n=nt, mu=model$mean, Sigma=model$cov)
}
true_signal
model
true_signal <- mvrnorm(n=nt, mu=model$mean, Sigma=model$cov)
true_signal
noise <- sapply(1:nf, function(x) rnorm(n=nt, mu=0, Sigma=0), simplify='array')
noise_sig = 0
noise
noise_sig
rnorm(n=nt, mu=0, Sigma=0)
model
noise <- sapply(1:nf, function(x) rnorm(n=nt, mu=array(0), Sigma=array(noise_sig)), simplify='array')
rnorm(100)
noise <- sapply(1:nf, function(x) mvrnorm(n=nt, mu=0, Sigma=noise_sig), simplify='array')
dim(noise)
noise <- sapply(1:nf, function(x) mvrnorm(n=nt, mu=0, Sigma=noise_sig), simplify='TRUE')
dim(noise)
dim(true_signal)
true_signal + noise
dim(true_signal + noise)
get_sample_data <- function(nt, nc, nroi, window, offset=4, overlap=4, verbose=1) {
conditions <- array(0, dim=c(nt, nc)) # initialize empty condition vector
for (cond in 1:nc) {
conditions[seq((cond-1)*overlap + 1, nt, (nc-1)*overlap + offset), cond] <- 1
}
source('C:/Users/ebrid/Documents/GitHub/memory/code/R/drivers/convolve_trial_onsets.R')
response <- convolve_conditions(conditions, window)
require('ggplot2')
require('reshape2')
require('Rmisc')
if(verbose > 0) {
func <- ggplot(data = melt(window), aes(x = Var1, y = value)) + geom_line() +
xlab('Time Point') + ylab('Relative Response') + ggtitle('Response F(t)')
sp <- ggplot(data = melt(conditions), aes(x = Var1, y=value, group=factor(Var2), color=factor(Var2))) +
geom_line() +
xlab('Time Point') + ylab('Spike') + ggtitle('Spike Train of Condition Onset') +
theme(legend.position='none')
conv <- ggplot(data = melt(response), aes(x = Var1, y=value, color=factor(Var2), group=factor(Var2))) +
geom_line() +
xlab('Time Point') + ylab('Relative Response') + ggtitle('Signal Present for Condition') +
scale_colour_discrete(name='Condition') +
theme(legend.position='bottom')
multiplot(plotlist=list(func,sp, conv, ggplot()), layout=matrix(c(1, 4, 2, 2, 3, 3, 3, 3), nrow=4, byrow=TRUE))
}
pi_vec <- t(apply(response, 1, function(x) {
sum_x = sum(x)
if (isTRUE(all.equal(sum_x, 0))) {
return(array(0, dim=length(x)))
} else {
return(x/sum_x) # normalize the response
}
}))
require('MASS')
require('clusterGeneration')
latent_signal <- array(0, dim=c(dim(conditions)[2], nt, nroi))
for (i in 1:dim(conditions)[2]) {
positive_def = rnorm(nroi)
positive_def = positive_def %*% t(positive_def)
while (min(Re(eigen(positive_def)$values)) < 0) {
positive_def = positive_def + diag(nroi)
}
latent_signal[i,,] <- mvrnorm(n=nt, mu=rnorm(nroi), Sigma=positive_def) # use random mu, random sigma for signals
}
# define the observed signal as a combination of the latent signals, where the contribution
# of each is the pi vector at that time step
observed_signal <- t(sapply(1:dim(latent_signal)[2], function(t) {
apply(pi_vec[t,]*latent_signal[,t,], 2, sum)
}))
true_means <- apply(latent_signal, c(1,3), mean)
true_cov <- sapply(1:dim(latent_signal)[1], function(x) cov(latent_signal[x,,]), simplify='array')
return(list(x=observed_signal, pi=pi_vec, mean=true_means, cov=true_cov))
}
```
```{r }
source('tGMM.R')
source('gmm_known_pi.R')
nroi <- 4
ncond <- 3
nt <- 200
window <- array(c(0, 1, 1, 1, 1, 0))
# predict a diagonal matrix for simple case
predict_mean <- array(0, dim=c(ncond, nroi))
predict_cov <- sapply(1:ncond, function(x) diag(nroi), simplify='array')
test_dat <- get_sample_data(nt, ncond, nroi, window, offset=4, overlap=2)
new <- tGMM(test_dat$x, array(0, dim=c(ncond, nroi)), predict_cov, test_dat$pi)
old <- gmm_known_pi(test_dat$x, array(0, dim=c(ncond, nroi)), predict_cov, test_dat$pi)
newll_df <- melt(new$ll)
oldll_df <- melt(old$ll)
new_llp <- ggplot(data=melt(new$ll), aes(x=1:length(new$ll), y=value)) +
geom_line(size=1.5, color='blue') +
xlab('Number of Iterations') +
ylab('Likelihood') +
ggtitle('Bug Fixed')
old_llp <- ggplot(data = melt(old$ll), aes(x=1:length(old$ll), y=value)) +
geom_line(size=1.5, color='green') +
xlab('Number of Iterations') +
ylab('Likelihood') +
ggtitle('Bug Not Fixed')
multiplot(plotlist=list(new_llp, old_llp), layout=matrix(c(1, 2), nrow=1, byrow=TRUE))
76 + 13
54 + 74 + 49
14 + 80 + 75
a$type
model <- c()
model$type
numsubs <- 2
numsessions <- 2
nt <- 100
nf <- 2
ts <- sapply(1:numsubs, function(sub) {
model <- random_model(nf, option=option)
tssub <- sapply(1:numsessions, function(session) {
sample_random_timeseries(nt, nf, model=model, noise=noise)
}, USE.NAMES=TRUE, simplify=simplify)
}, USE.NAMES=TRUE, simplify=simplify)
source('~/GitHub/randomts/R/random_model.R')
ts <- sapply(1:numsubs, function(sub) {
model <- random_model(nf, option=option)
tssub <- sapply(1:numsessions, function(session) {
sample_random_timeseries(nt, nf, model=model, noise=noise)
}, USE.NAMES=TRUE, simplify=simplify)
}, USE.NAMES=TRUE, simplify=simplify)
option <- 'gaussian'
ts <- sapply(1:numsubs, function(sub) {
model <- random_model(nf, option=option)
tssub <- sapply(1:numsessions, function(session) {
sample_random_timeseries(nt, nf, model=model, noise=noise)
}, USE.NAMES=TRUE, simplify=simplify)
}, USE.NAMES=TRUE, simplify=simplify)
source('~/GitHub/randomts/R/sample_random_timeseries.R')
ts <- sapply(1:numsubs, function(sub) {
model <- random_model(nf, option=option)
tssub <- sapply(1:numsessions, function(session) {
sample_random_timeseries(nt, nf, model=model, noise=noise)
}, USE.NAMES=TRUE, simplify=simplify)
}, USE.NAMES=TRUE, simplify=simplify)
source('~/GitHub/randomts/R/positiveDef.R')
as.numeric(12.5000)
source('~/GitHub/randomts/R/sample_random_timeseries.R')
source('~/GitHub/randomts/R/positiveDef.R')
source('~/GitHub/randomts/R/sample_random_population.R')
ts <- sapply(1:numsubs, function(sub) {
model <- random_model(nf, option=option)
tssub <- sapply(1:numsessions, function(session) {
sample_random_timeseries(nt, nf, model=model, noise=noise)
}, USE.NAMES=TRUE, simplify=simplify)
}, USE.NAMES=TRUE, simplify=simplify)
source('~/GitHub/randomts/R/sample_random_timeseries.R')
ts <- sapply(1:numsubs, function(sub) {
model <- random_model(nf, option=option)
tssub <- sapply(1:numsessions, function(session) {
sample_random_timeseries(nt, nf, model=model, noise=noise)
}, USE.NAMES=TRUE, simplify=simplify)
}, USE.NAMES=TRUE, simplify=simplify)
source('~/GitHub/randomts/R/sample_random_timeseries.R')
ts <- sapply(1:numsubs, function(sub) {
model <- random_model(nf, option=option)
tssub <- sapply(1:numsessions, function(session) {
sample_random_timeseries(nt, nf, model=model, noise=noise)
}, USE.NAMES=TRUE, simplify=simplify)
}, USE.NAMES=TRUE, simplify=simplify)
simplify=FALSE
ts <- sapply(1:numsubs, function(sub) {
model <- random_model(nf, option=option)
tssub <- sapply(1:numsessions, function(session) {
sample_random_timeseries(nt, nf, model=model, noise=noise)
}, USE.NAMES=TRUE, simplify=simplify)
}, USE.NAMES=TRUE, simplify=simplify)
ts
ts[[1]]
ts$1
source('~/GitHub/randomts/R/sample_random_population.R')
ts <- sapply(1:numsubs, function(sub) {
model <- random_model(nf, option=option)
tssub <- sapply(1:numsessions, function(session) {
sample_random_timeseries(nt, nf, model=model, noise=noise)
}, USE.NAMES=TRUE, simplify=simplify)
return(tssub)
}, USE.NAMES=TRUE, simplify=simplify)
ts
tssub <- sapply(1:numsessions, function(session) {
sample_random_timeseries(nt, nf, model=model, noise=noise)
}, USE.NAMES=TRUE, simplify=simplify)
model
model <- random_model(nf, option=option)
model$type
model$mean
model$cov
tssub <- sapply(1:numsessions, function(session) {
sample_random_timeseries(nt, nf, model=model, noise=noise)
}, USE.NAMES=TRUE, simplify=simplify)
tssub
tssub <- sapply(1:numsessions, function(session) {
sample_random_timeseries(nt, nf, model=model, noise=noise)
}, USE.NAMES=TRUE, simplify='list')
tssub
test <- sample_random_timeseries(nt, nf, model=model, noise=noise)
test
source('~/GitHub/randomts/R/sample_random_population.R')
source('~/GitHub/randomts/R/sample_random_timeseries.R')
test <- sample_random_timeseries(nt, nf, model=model, noise=noise)
test$signal
test$model
tssub <- sapply(1:numsessions, function(session) {
sample_random_timeseries(nt, nf, model=model, noise=noise)
}, USE.NAMES=TRUE, simplify=FALSE)
tssub$1
tssub
tssub[[1]]
ts <- sapply(1:numsubs, function(sub) {
model <- random_model(nf, option=option)
tssub <- sapply(1:numsessions, function(session) {
sample_random_timeseries(nt, nf, model=model, noise=noise)
}, USE.NAMES=TRUE, simplify=FALSE)
return(tssub)
}, USE.NAMES=TRUE, simplify=simplify)
ts
ts[[1]][[1]]
ts[[1]][[2]]
ts[[1]][[3]]
ts[[1]][[1]]
simplify='array'
tssub <- sapply(1:numsessions, function(session) {
sample_random_timeseries(nt, nf, model=model, noise=noise)
}, USE.NAMES=TRUE, simplify=FALSE)
tssub
tssub <- sapply(1:numsessions, function(session) {
sample_random_timeseries(nt, nf, model=model, noise=noise)
}, USE.NAMES=TRUE, simplify='array')
tssub
simplify='array'
tssub <- sapply(1:numsessions, function(session) {
sample_random_timeseries(nt, nf, model=model, noise=noise, simplify=simplify)
}, USE.NAMES=TRUE, simplify=FALSE)
simplify=TRUE
source('~/GitHub/randomts/R/sample_random_timeseries.R')
tssub <- sapply(1:numsessions, function(session) {
sample_random_timeseries(nt, nf, model=model, noise=noise, simplify=simplify)
}, USE.NAMES=TRUE, simplify=FALSE)
tssub
unlist(tssub)
sapply(unlist(tssub))
sapply(tssub, unlist)
simplify2array(tssub)
simplify=TRUE
tssub <- sapply(1:numsessions, function(session) {
sample_random_timeseries(nt, nf, model=model, noise=noise, simplify=simplify)
}, USE.NAMES=TRUE, simplify=FALSE)
tssub
tssub
simplify2array(tssub)
dim(simplify2array(tssub))
ts <- sapply(1:numsubs, function(sub) {
model <- random_model(nf, option=option)
tssub <- sapply(1:numsessions, function(session) {
sample_random_timeseries(nt, nf, model=model, noise=noise, simplify=simplify)
}, USE.NAMES=TRUE, simplify=FALSE)
if (isTRUE(all.equal(simplify, TRUE))) {
return(simplify2array(tssub))
} else {
return(tssub)
}
}, USE.NAMES=TRUE, simplify=simplify)
ts
dim(ts)
simplify
numsubs
tssub <- sapply(1:numsessions, function(session) {
sample_random_timeseries(nt, nf, model=model, noise=noise, simplify=simplify)
}, USE.NAMES=TRUE, simplify=FALSE)
if (isTRUE(all.equal(simplify, TRUE))) {
return(simplify2array(tssub))
}
ts <- sapply(1:numsubs, function(sub) {
model <- random_model(nf, option=option)
tssub <- sapply(1:numsessions, function(session) {
sample_random_timeseries(nt, nf, model=model, noise=noise, simplify=simplify)
}, USE.NAMES=TRUE, simplify=FALSE)
if (isTRUE(all.equal(simplify, TRUE))) {
return(simplify2array(tssub))
} else {
return(tssub)
}
}, USE.NAMES=TRUE, simplify=FALSE)
ts
dim(ts)
ts[[1]]
simplify2array(ts)
71 + 40 + 42
simplify='array'
tssub <- sapply(1:numsessions, function(session) {
sample_random_timeseries(nt, nf, model=model, noise=noise, simplify=simplify)
}, USE.NAMES=TRUE, simplify=simplify)
source('~/GitHub/randomts/R/sample_random_timeseries.R')
tssub <- sapply(1:numsessions, function(session) {
sample_random_timeseries(nt, nf, model=model, noise=noise, simplify=simplify)
}, USE.NAMES=TRUE, simplify=simplify)
tssub
dim(tssub)
source('~/GitHub/randomts/R/sample_random_timeseries.R')
source('~/GitHub/randomts/R/sample_random_population.R')
source('~/GitHub/randomts/R/sample_random_population.R')
simplify='array'
ts <- sapply(1:numsubs, function(sub) {
model <- random_model(nf, option=option)
tssub <- sapply(1:numsessions, function(session) {
sample_random_timeseries(nt, nf, model=model, noise=noise, simplify=simplify)
}, USE.NAMES=TRUE, simplify=simplify)
}, USE.NAMES=TRUE, simplify=simplify)
ts
dim(ts)
source('~/GitHub/randomts/R/sample_random_population.R')
ts <- sample_random_population(4, 2, 100, 1, option='gaussian')
ts
simplify='array'
ts <- sample_random_population(4, 2, 100, 1, option='gaussian', simplify=simplify)
dim(ts)
source('~/GitHub/randomts/R/sample_random_population.R')
library(randomts)
?positiveDef
positiveDef
??positiveDef
library(randomts)
?random_model
devtools::document()
?positive_def
?positiveDef
?sample_random_population
library(randomts)
?positiveDef
?sample_random_population
devtools::document()
?sample_random_population
devtools::document()
?sample_random_population
library(randomts)
install.packages('Rtools')
git init
git init
install.packages('git')
positiveDef
positiveDef()
?positiveDef
library(randomts)
devtools::document()
?positiveDef
positiveDef(10)
test <- positiveDef(10)
require('mvtnorm')
install('./')
library('devtools')
install('./')
install('./')
install.packages('randomts')
install.packages("randomts")
install.packages('./randomts')
install.packages('./',  repos=NULL, type='source')
library('randomts')
?positiveDef
100/(.082 * 300 * 100^3 *1000)
install.packages('ellipse')
require('randomts')
examples(positiveDef)
example(positiveDef)
?positiveDef
example(positiveDef)
test <- positiveDef(10)
?positiveDef
library('randomts')
test <- positiveDef(10)
positiveDef
random_model
?random_model
library(randomts)
examples(positiveDef)
example(positiveDef)
test <- positiveDef(10)
array(1)
test <- array(1)
ncol(test)
dim(test)
dim(1)
dim(array(1))
dim(matrix(1))
ncol(matrix(1))
matrix(1)
matrix(1)
matrix(1)
ncol(matrix(5))
56 + 19 + 78
library(randomts)
library(randomts)
install.packages('devtools')
library(randomts)
install.pacakges('devtools')
install.packages('devtools')
library(randomts)
library(randomts)
library(randomts)
find_rtools(T)
library(devtools)
find_rtools(T)
require('MASS')
source('~/GitHub/randomts/R/sample_random_population.R')
library(randomts)
sample_random_timeseries
?sample_random_timeseries
Sys.which("gcc")
Sys.which("ls")
libPaths()
.libPaths()
find_rtools(T)
T
find_rtools(T)
.libPaths( c( .lobPaths(), "C:/Rtools/bin/ls.exe"))
.libPaths( c( .libPaths(), "C:/Rtools/bin/ls.exe"))
libPaths()
.libPaths()
exit
exit()
library(randomts)
Sys.which("ls")
.libPaths()
.libPaths()
Sys.which("PATH")
Sys.getenv('PATH')
exit
